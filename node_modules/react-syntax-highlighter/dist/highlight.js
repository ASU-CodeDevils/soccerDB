'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

exports.default = function (lowlight, defaultStyle) {
  return function SyntaxHighlighter(props) {
    var language = props.language,
        children = props.children,
        _props$style = props.style,
        style = _props$style === undefined ? defaultStyle : _props$style,
        _props$customStyle = props.customStyle,
        customStyle = _props$customStyle === undefined ? {} : _props$customStyle,
        _props$codeTagProps = props.codeTagProps,
        codeTagProps = _props$codeTagProps === undefined ? {} : _props$codeTagProps,
        _props$useInlineStyle = props.useInlineStyles,
        useInlineStyles = _props$useInlineStyle === undefined ? true : _props$useInlineStyle,
        _props$showLineNumber = props.showLineNumbers,
        showLineNumbers = _props$showLineNumber === undefined ? false : _props$showLineNumber,
        _props$startingLineNu = props.startingLineNumber,
        startingLineNumber = _props$startingLineNu === undefined ? 1 : _props$startingLineNu,
        lineNumberContainerStyle = props.lineNumberContainerStyle,
        lineNumberStyle = props.lineNumberStyle,
        _props$wrapLines = props.wrapLines,
        wrapLines = _props$wrapLines === undefined ? false : _props$wrapLines,
        _props$lineStyle = props.lineStyle,
        lineStyle = _props$lineStyle === undefined ? {} : _props$lineStyle,
        rest = (0, _objectWithoutProperties3.default)(props, ['language', 'children', 'style', 'customStyle', 'codeTagProps', 'useInlineStyles', 'showLineNumbers', 'startingLineNumber', 'lineNumberContainerStyle', 'lineNumberStyle', 'wrapLines', 'lineStyle']);

    var codeTree = language ? lowlight.highlight(language, children) : lowlight.highlightAuto(children);
    var defaultPreStyle = style.hljs || { backgroundColor: '#fff' };
    var preProps = useInlineStyles ? (0, _assign2.default)({}, rest, { style: (0, _assign2.default)({}, defaultPreStyle, customStyle) }) : (0, _assign2.default)({}, rest, { className: 'hljs' });

    var tree = wrapLines ? wrapLinesInSpan(codeTree, lineStyle) : codeTree.value;
    var lineNumbers = showLineNumbers ? _react2.default.createElement(LineNumbers, {
      containerStyle: lineNumberContainerStyle,
      numberStyle: lineNumberStyle,
      startingLineNumber: startingLineNumber,
      codeString: children
    }) : null;
    return _react2.default.createElement(
      'pre',
      preProps,
      lineNumbers,
      _react2.default.createElement(
        'code',
        codeTagProps,
        tree.map(function (node, i) {
          return createElement({
            node: node,
            style: style,
            useInlineStyles: useInlineStyles,
            key: 'code-segement' + i
          });
        })
      )
    );
  };
};

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var newLineRegex = /\n/g;
function getNewLines(str) {
  return str.match(newLineRegex);
}

function createStyleObject(classNames) {
  var elementStyle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var stylesheet = arguments[2];

  return classNames.reduce(function (styleObject, className) {
    return (0, _extends3.default)({}, styleObject, stylesheet[className]);
  }, elementStyle);
}

function createClassNameString(classNames) {
  return classNames.join(' ');
}

function createChildren(style, useInlineStyles) {
  var childrenCount = 0;
  return function (children) {
    childrenCount += 1;
    return children.map(function (child, i) {
      return createElement({
        node: child,
        style: style,
        useInlineStyles: useInlineStyles,
        key: 'code-segment-' + childrenCount + '-' + i
      });
    });
  };
}

function createElement(_ref) {
  var node = _ref.node,
      style = _ref.style,
      useInlineStyles = _ref.useInlineStyles,
      key = _ref.key;
  var properties = node.properties,
      type = node.type,
      tagName = node.tagName,
      value = node.value;

  if (type === 'text') {
    return value;
  } else if (tagName) {
    var TagName = tagName;
    var childrenCreator = createChildren(style, useInlineStyles);
    var props = useInlineStyles ? { style: createStyleObject(properties.className, properties.style, style) } : { className: createClassNameString(properties.className) };
    var children = childrenCreator(node.children);
    return _react2.default.createElement(
      TagName,
      (0, _extends3.default)({ key: key }, props),
      children
    );
  }
}

function getLineNumbers(_ref2) {
  var lines = _ref2.lines,
      startingLineNumber = _ref2.startingLineNumber,
      style = _ref2.style;

  return lines.map(function (_, i) {
    var number = i + startingLineNumber;
    return _react2.default.createElement(
      'span',
      {
        key: 'line-' + i,
        className: 'react-syntax-highlighter-line-number',
        style: typeof style === 'function' ? style(number) : style
      },
      number + '\n'
    );
  });
}

function LineNumbers(_ref3) {
  var codeString = _ref3.codeString,
      _ref3$containerStyle = _ref3.containerStyle,
      containerStyle = _ref3$containerStyle === undefined ? { float: 'left', paddingRight: '10px' } : _ref3$containerStyle,
      _ref3$numberStyle = _ref3.numberStyle,
      numberStyle = _ref3$numberStyle === undefined ? {} : _ref3$numberStyle,
      startingLineNumber = _ref3.startingLineNumber;

  return _react2.default.createElement(
    'code',
    { style: containerStyle },
    getLineNumbers({
      lines: codeString.replace(/\n$/, '').split('\n'),
      style: numberStyle,
      startingLineNumber: startingLineNumber
    })
  );
}

function createLineElement(_ref4) {
  var children = _ref4.children,
      lineNumber = _ref4.lineNumber,
      lineStyle = _ref4.lineStyle;

  return {
    type: 'element',
    tagName: 'span',
    properties: {
      className: [],
      style: typeof lineStyle === 'function' ? lineStyle(lineNumber) : lineStyle
    },
    children: children
  };
}

function wrapLinesInSpan(codeTree, lineStyle) {
  var _codeTree$value$reduc = codeTree.value.reduce(function (_ref5, node, index) {
    var newTree = _ref5.newTree,
        lastLineBreakIndex = _ref5.lastLineBreakIndex;

    var newLines = void 0;
    newLines = node.type === "text" && getNewLines(node.value);
    if (newLines) {
      (function () {
        var splitValue = node.value.split('\n');
        splitValue.forEach(function (text, i) {
          var lineNumber = newTree.length + 1;
          var newChild = { type: 'text', value: text + '\n' };
          if (i === 0) {
            var children = codeTree.value.slice(lastLineBreakIndex + 1, index).concat(newChild);
            newTree.push(createLineElement({ children: children, lineNumber: lineNumber, lineStyle: lineStyle }));
          } else if (i === splitValue.length - 1 && codeTree.value[index + 1]) {
            codeTree.value[index + 1].children[0].value = '' + text + codeTree.value[index + 1].children[0].value;
          } else {
            newTree.push(createLineElement({ children: [newChild], lineNumber: lineNumber, lineStyle: lineStyle }));
          }
        });
        lastLineBreakIndex = index;
      })();
    }
    return { newTree: newTree, lastLineBreakIndex: lastLineBreakIndex };
  }, { newTree: [], lastLineBreakIndex: -1 }),
      newTree = _codeTree$value$reduc.newTree,
      lastLineBreakIndex = _codeTree$value$reduc.lastLineBreakIndex;

  if (lastLineBreakIndex !== codeTree.value.length - 1) {
    var children = codeTree.value.slice(lastLineBreakIndex + 1, codeTree.value.length);
    newTree.push(createLineElement({ children: children, lineNumber: newTree.length + 1, lineStyle: lineStyle }));
  }
  return newTree;
}